using NB1;
using System.Text;

Console.OutputEncoding = Encoding.UTF8;

// Adatok beolvasása
List<Player> players = new List<Player>();
try
{
    string[] lines = File.ReadAllLines("adatok.txt");
    foreach (string line in lines)
    {
   string[] parts = line.Split('\t');
        if (parts.Length >= 9)
 {
 players.Add(new Player
         {
                KlubNeve = parts[0],
      MezSzam = int.Parse(parts[1]),
      Utonev = parts[2],
                Vezeteknev = parts[3],
                SzuletesiDatum = DateTime.Parse(parts[4]),
MagyarAllampolgar = parts[5] == "-1",
        KulfoldiAllampolgar = parts[6] == "-1",
       Ertek = int.Parse(parts[7]),
    PosztNeve = parts[8]
         });
        }
    }
    
    Console.WriteLine($"Összesen {players.Count} játékos adatait töltöttük be.\n");
    Console.WriteLine("===============================================================================\n");
}
catch (Exception ex)
{
    Console.WriteLine($"Hiba az adatok beolvasása során: {ex.Message}");
    return;
}

// ============================================================================
// a) A kapusokon kívül mindenkit mezőnyjátékosnak tekintünk. 
//    Keresse ki a legidősebb mezőnyjátékos vezeték- és utónevét, 
//    valamint születési dátumát! 
//    (Feltételezheti, hogy csak egy ilyen játékos van.)
// ============================================================================
Console.WriteLine("=== A) LEGIDŐSEBB MEZŐNYJÁTÉKOS ===\n");

var legidosebb = players
 .Where(p => p.Mezonyjatekos)
    .OrderBy(p => p.SzuletesiDatum)
    .FirstOrDefault();

if (legidosebb != null)
{
    Console.WriteLine($"Név: {legidosebb.TeljesNev}");
    Console.WriteLine($"Születési dátum: {legidosebb.SzuletesiDatum:yyyy.MM.dd.}");
    Console.WriteLine($"Kor: {legidosebb.Kor} év");
}
else
{
    Console.WriteLine("Nincs mezőnyjátékos az adatbázisban.");
}

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// b) Határozza meg hány magyar, külföldi és kettős állampolgárságú játékos van!
// ============================================================================
Console.WriteLine("=== B) ÁLLAMPOLGÁRSÁG SZERINTI STATISZTIKA ===\n");

int magyarok = players.Count(p => p.MagyarAllampolgar && !p.KulfoldiAllampolgar);
int kulfoldi = players.Count(p => !p.MagyarAllampolgar && p.KulfoldiAllampolgar);
int kettos = players.Count(p => p.MagyarAllampolgar && p.KulfoldiAllampolgar);

Console.WriteLine($"Magyar állampolgárok: {magyarok} fő");
Console.WriteLine($"Külföldi állampolgárok: {kulfoldi} fő");
Console.WriteLine($"Kettős állampolgárok: {kettos} fő");

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// c) Határozza meg játékosok összértékét csapatonként és írja ki a képernyőre! 
//    A csapatok neve és a játékosainak összértéke jelenjen meg!
// ============================================================================
Console.WriteLine("=== C) JÁTÉKOSOK ÖSSZÉRTÉKE CSAPATONKÉNT ===\n");

var osszertekek = players
    .GroupBy(p => p.KlubNeve)
.Select(g => new { Csapat = g.Key, Osszertek = g.Sum(p => p.Ertek) })
 .OrderByDescending(x => x.Osszertek);

foreach (var csapat in osszertekek)
{
    Console.WriteLine($"{csapat.Csapat,-30} {csapat.Osszertek,10:N0} ezer euró");
}

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// d) Keresse ki, hogy mely csapatoknál mely posztokon van csupán egy 
//    szerződtetett játékos! Írja ki a csapat nevet és a posztot amire 
// csak egy játékost szerződtettek!
// ============================================================================
Console.WriteLine("=== D) EGYEDI POSZTONKÉNTI JÁTÉKOSOK ===\n");

var egyediPosztok = players
 .GroupBy(p => new { p.KlubNeve, p.PosztNeve })
    .Where(g => g.Count() == 1)
    .Select(g => new { g.Key.KlubNeve, g.Key.PosztNeve })
    .OrderBy(x => x.KlubNeve)
    .ThenBy(x => x.PosztNeve);

if (egyediPosztok.Any())
{
    foreach (var item in egyediPosztok)
    {
        Console.WriteLine($"{item.KlubNeve,-30} - {item.PosztNeve}");
    }
}
else
{
    Console.WriteLine("Nincs olyan csapat, ahol csak egy játékos lenne egy poszton.");
}

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// e) Keressük ki azon játékosokat, akiknek az értékük nem haladja meg 
//    a játékosok értékének átlag értékét.
// ============================================================================
Console.WriteLine("=== E) ÁTLAG ALATTI ÉRTÉKŰ JÁTÉKOSOK ===\n");

double atlag = players.Average(p => p.Ertek);
Console.WriteLine($"Játékosok értékének átlaga: {atlag:N2} ezer euró\n");

var atlagAlattiJatekosok = players
    .Where(p => p.Ertek <= atlag)
    .OrderBy(p => p.Ertek);

Console.WriteLine($"Átlag alatti vagy átlagos értékű játékosok ({atlagAlattiJatekosok.Count()} fő):\n");

foreach (var jatekos in atlagAlattiJatekosok)
{
 Console.WriteLine($"{jatekos.TeljesNev,-30} {jatekos.Ertek,8:N0} ezer € - {jatekos.KlubNeve}");
}

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// f) Írja ki azon játékosok nevét, születési dátumát és csapataik nevét, 
//    akik 18 és 21 év közt vannak és magyar állampolgárok. 
//    Ha nincs ilyen, akkor megfelelő üzenettel helyettesítse a kimenetet.
// ============================================================================
Console.WriteLine("=== F) 18-21 ÉVES MAGYAR JÁTÉKOSOK ===\n");

var fiatalMagyarok = players
    .Where(p => p.MagyarAllampolgar && p.Kor >= 18 && p.Kor <= 21)
    .OrderBy(p => p.Kor)
    .ThenBy(p => p.Vezeteknev);

if (fiatalMagyarok.Any())
{
    foreach (var jatekos in fiatalMagyarok)
    {
        Console.WriteLine($"{jatekos.TeljesNev,-30} {jatekos.SzuletesiDatum:yyyy.MM.dd.} ({jatekos.Kor} év) - {jatekos.KlubNeve}");
    }
}
else
{
    Console.WriteLine("Nincs 18 és 21 év közötti magyar állampolgárságú játékos.");
}

Console.WriteLine("\n===============================================================================\n");

// ============================================================================
// g) A „hazai.txt" illetve a „legios.txt" állományokba keresse ki a magyar, 
//    illetve a külföldi állampolgárságú játékosokat csapatonként. 
//    A szöveges állományoknak tartalmazniuk kell a csapat nevét majd alatta 
//    felsorolva a játékosok teljes nevét, poszt nevet és értéküket.
// ============================================================================
Console.WriteLine("=== G) JÁTÉKOSOK EXPORTÁLÁSA ===\n");

try
{
    // hazai.txt - Magyar állampolgárok
    using (StreamWriter sw = new StreamWriter("hazai.txt", false, Encoding.UTF8))
    {
   var magyarCsapatok = players
            .Where(p => p.MagyarAllampolgar && !p.KulfoldiAllampolgar)
   .GroupBy(p => p.KlubNeve)
    .OrderBy(g => g.Key);

        foreach (var csapat in magyarCsapatok)
  {
         sw.WriteLine(csapat.Key);
  sw.WriteLine(new string('-', csapat.Key.Length));
    
   foreach (var jatekos in csapat.OrderBy(p => p.Vezeteknev))
            {
      sw.WriteLine($"{jatekos.TeljesNev,-30} {jatekos.PosztNeve,-20} {jatekos.Ertek,8:N0} ezer €");
            }
            
   sw.WriteLine();
        }
    }
    Console.WriteLine("✓ hazai.txt sikeresen létrehozva (magyar játékosok)");

    // legios.txt - Külföldi állampolgárok
    using (StreamWriter sw = new StreamWriter("legios.txt", false, Encoding.UTF8))
    {
        var kulfoldiCsapatok = players
        .Where(p => p.KulfoldiAllampolgar)
   .GroupBy(p => p.KlubNeve)
  .OrderBy(g => g.Key);

        foreach (var csapat in kulfoldiCsapatok)
     {
            sw.WriteLine(csapat.Key);
       sw.WriteLine(new string('-', csapat.Key.Length));
          
     foreach (var jatekos in csapat.OrderBy(p => p.Vezeteknev))
     {
     sw.WriteLine($"  {jatekos.TeljesNev,-30} {jatekos.PosztNeve,-20} {jatekos.Ertek,8:N0} ezer €");
      }
      
       sw.WriteLine();
 }
    }
    Console.WriteLine("✓ legios.txt sikeresen létrehozva (külföldi játékosok)");
}
catch (Exception ex)
{
  Console.WriteLine($"Hiba a fájlok írása során: {ex.Message}");
}

Console.WriteLine("\n===============================================================================");
Console.WriteLine("\nMinden feladat elkészült! Nyomjon Enter-t a kilépéshez...");
Console.ReadLine();
